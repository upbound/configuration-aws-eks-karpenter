apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: pat.xkarpenters.aws.platform.upbound.io
  labels:
    provider: aws
    function: patch-and-transform
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: aws.platform.upbound.io/v1alpha1
    kind: XKarpenter
  mode: Pipeline
  pipeline:
    - step: patch-and-transform
      functionRef:
        name: crossplane-contrib-function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        patchSets:
          - name: providerConfigRef
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.providerConfigName
                toFieldPath: spec.providerConfigRef.name
          - name: deletionPolicy
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.deletionPolicy
                toFieldPath: spec.deletionPolicy
          - name: region
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.region
                toFieldPath: spec.forProvider.region
        resources:
          - name: instanceNodeRole
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: Role
              metadata:
                labels:
                  role: karpenter
              spec:
                forProvider:
                  assumeRolePolicy: |
                    {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": [
                                      "ec2.amazonaws.com"
                                  ]
                              },
                              "Action": [
                                  "sts:AssumeRole"
                              ]
                          }
                      ]
                    }
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterName
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: KarpenterNodeRole-%s
                      type: Format
                    type: string
              - type: ToCompositeFieldPath
                fromFieldPath: status.atProvider.arn
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.karpenter.instanceProfileRoleArn
              - type: ToCompositeFieldPath
                fromFieldPath: status.atProvider.arn
                toFieldPath: status.karpenter.accountId
                transforms:
                  - string:
                      regexp:
                        group: 1
                        match: '::(\d+):'
                      type: Regexp
                    type: string

          - name: instanceNodeRoleEKSPolicy
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: karpenter
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy

          - name: InstanceNodeRoleCNIPolicy
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: karpenter
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy

          - name: instanceNodeRoleECRPolicy
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: karpenter
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy

          - name: instanceNodeRoleSSMPolicy
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: karpenter
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy

          - name: instanceProfile
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: InstanceProfile
              spec:
                forProvider:
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: karpenter
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: ToCompositeFieldPath
                fromFieldPath: status.atProvider.arn
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.karpenter.instanceProfileArn
              - type: ToCompositeFieldPath
                fromFieldPath: status.atProvider.id
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.karpenter.instanceProfileName

          - name: AccessEntry
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: AccessEntry
              spec:
                forProvider:
                  type: EC2_LINUX
                  principalArnFromRoleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: karpenter
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterName
                toFieldPath: spec.forProvider.clusterName
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterNameRef
                toFieldPath: spec.forProvider.clusterNameRef
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterNameSelector
                toFieldPath: spec.forProvider.clusterNameSelector
              - type: ToCompositeFieldPath
                fromFieldPath: status.atProvider.clusterName
                toFieldPath: status.karpenter.clusterName
                policy:
                  fromFieldPath: Optional

          - name: PodIdentity
            base:
              apiVersion: aws.platform.upbound.io/v1alpha1
              kind: XPodIdentity
              spec:
                parameters:
                  inlinePolicy:
                    - name: default
                  serviceAccount:
                    name: karpenter
                    namespace: karpenter
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.region
                toFieldPath: spec.parameters.region
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.deletionPolicy
                toFieldPath: spec.parameters.deletionPolicy
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.providerConfigName
                toFieldPath: spec.parameters.providerConfigName
              - type: FromCompositeFieldPath
                fromFieldPath: status.karpenter.clusterName
                toFieldPath: spec.parameters.clusterName
                policy:
                  fromFieldPath: Required
              - type: CombineFromComposite
                combine:
                  strategy: string
                  string:
                    fmt: |
                      {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Sid": "AllowScopedEC2InstanceActions",
                            "Effect": "Allow",
                            "Resource": [
                              "arn:aws:ec2:%[1]s::image/*",
                              "arn:aws:ec2:%[1]s::snapshot/*",
                              "arn:aws:ec2:%[1]s:*:spot-instances-request/*",
                              "arn:aws:ec2:%[1]s:*:security-group/*",
                              "arn:aws:ec2:%[1]s:*:subnet/*"
                            ],
                            "Action": [
                              "ec2:RunInstances",
                              "ec2:CreateFleet"
                            ]
                          },
                          {
                            "Sid": "AllowScopedEC2LaunchTemplateAccessActions",
                            "Effect": "Allow",
                            "Resource": "arn:aws:ec2:%[1]s:*:launch-template/*",
                            "Action": [
                              "ec2:RunInstances",
                              "ec2:CreateFleet"
                            ],
                            "Condition": {
                              "StringEquals": {
                                "aws:ResourceTag/kubernetes.io/cluster/%[2]s": "owned"
                              },
                              "StringLike": {
                                "aws:ResourceTag/karpenter.sh/nodepool": "*"
                              }
                            }
                          },
                          {
                            "Sid": "AllowScopedEC2InstanceActionsWithTags",
                            "Effect": "Allow",
                            "Resource": [
                              "arn:aws:ec2:%[1]s:*:fleet/*",
                              "arn:aws:ec2:%[1]s:*:instance/*",
                              "arn:aws:ec2:%[1]s:*:volume/*",
                              "arn:aws:ec2:%[1]s:*:network-interface/*",
                              "arn:aws:ec2:%[1]s:*:launch-template/*",
                              "arn:aws:ec2:%[1]s:*:spot-instances-request/*"
                            ],
                            "Action": [
                              "ec2:RunInstances",
                              "ec2:CreateFleet",
                              "ec2:CreateLaunchTemplate"
                            ],
                            "Condition": {
                              "StringEquals": {
                                "aws:RequestTag/kubernetes.io/cluster/%[2]s": "owned",
                                "aws:RequestTag/eks:eks-cluster-name": "%[2]s"
                              },
                              "StringLike": {
                                "aws:RequestTag/karpenter.sh/nodepool": "*"
                              }
                            }
                          },
                          {
                            "Sid": "AllowScopedResourceCreationTagging",
                            "Effect": "Allow",
                            "Resource": [
                              "arn:aws:ec2:%[1]s:*:fleet/*",
                              "arn:aws:ec2:%[1]s:*:instance/*",
                              "arn:aws:ec2:%[1]s:*:volume/*",
                              "arn:aws:ec2:%[1]s:*:network-interface/*",
                              "arn:aws:ec2:%[1]s:*:launch-template/*",
                              "arn:aws:ec2:%[1]s:*:spot-instances-request/*"
                            ],
                            "Action": "ec2:CreateTags",
                            "Condition": {
                              "StringEquals": {
                                "aws:RequestTag/kubernetes.io/cluster/%[2]s": "owned",
                                "aws:RequestTag/eks:eks-cluster-name": "%[2]s",
                                "ec2:CreateAction": [
                                  "RunInstances",
                                  "CreateFleet",
                                  "CreateLaunchTemplate"
                                ]
                              },
                              "StringLike": {
                                "aws:RequestTag/karpenter.sh/nodepool": "*"
                              }
                            }
                          },
                          {
                            "Sid": "AllowScopedResourceTagging",
                            "Effect": "Allow",
                            "Resource": "arn:aws:ec2:%[1]s:*:instance/*",
                            "Action": "ec2:CreateTags",
                            "Condition": {
                              "StringEquals": {
                                "aws:ResourceTag/kubernetes.io/cluster/%[2]s": "owned"
                              },
                              "StringLike": {
                                "aws:ResourceTag/karpenter.sh/nodepool": "*"
                              },
                              "StringEqualsIfExists": {
                                "aws:RequestTag/eks:eks-cluster-name": "%[2]s"
                              },
                              "ForAllValues:StringEquals": {
                                "aws:TagKeys": [
                                  "eks:eks-cluster-name",
                                  "karpenter.sh/nodeclaim",
                                  "Name"
                                ]
                              }
                            }
                          },
                          {
                            "Sid": "AllowScopedDeletion",
                            "Effect": "Allow",
                            "Resource": [
                              "arn:aws:ec2:%[1]s:*:instance/*",
                              "arn:aws:ec2:%[1]s:*:launch-template/*"
                            ],
                            "Action": [
                              "ec2:TerminateInstances",
                              "ec2:DeleteLaunchTemplate"
                            ],
                            "Condition": {
                              "StringEquals": {
                                "aws:ResourceTag/kubernetes.io/cluster/%[2]s": "owned"
                              },
                              "StringLike": {
                                "aws:ResourceTag/karpenter.sh/nodepool": "*"
                              }
                            }
                          },
                          {
                            "Sid": "AllowRegionalReadActions",
                            "Effect": "Allow",
                            "Resource": "*",
                            "Action": [
                              "ec2:DescribeAvailabilityZones",
                              "ec2:DescribeImages",
                              "ec2:DescribeInstances",
                              "ec2:DescribeInstanceTypeOfferings",
                              "ec2:DescribeInstanceTypes",
                              "ec2:DescribeLaunchTemplates",
                              "ec2:DescribeSecurityGroups",
                              "ec2:DescribeSpotPriceHistory",
                              "ec2:DescribeSubnets"
                            ],
                            "Condition": {
                              "StringEquals": {
                                "aws:RequestedRegion": "%[1]s"
                              }
                            }
                          },
                          {
                            "Sid": "AllowSSMReadActions",
                            "Effect": "Allow",
                            "Resource": "arn:aws:ssm:%[1]s::parameter/aws/service/*",
                            "Action": "ssm:GetParameter"
                          },
                          {
                            "Sid": "AllowPricingReadActions",
                            "Effect": "Allow",
                            "Resource": "*",
                            "Action": "pricing:GetProducts"
                          },
                          {
                            "Sid": "AllowInterruptionQueueActions",
                            "Effect": "Allow",
                            "Resource": "%[3]s",
                            "Action": [
                              "sqs:DeleteMessage",
                              "sqs:GetQueueUrl",
                              "sqs:ReceiveMessage"
                            ]
                          },
                          {
                            "Sid": "AllowPassingInstanceRole",
                            "Effect": "Allow",
                            "Resource": "%[5]s",
                            "Action": "iam:PassRole",
                            "Condition": {
                              "StringEquals": {
                                "iam:PassedToService": "ec2.amazonaws.com"
                              }
                            }
                          },
                          {
                            "Sid": "AllowAPIServerEndpointDiscovery",
                            "Effect": "Allow",
                            "Resource": "arn:aws:eks:%[1]s:%[4]s:cluster/%[2]s",
                            "Action": "eks:DescribeCluster"
                          }
                        ]
                      }
                  variables:
                    - fromFieldPath: spec.parameters.region
                    - fromFieldPath: status.karpenter.clusterName
                    - fromFieldPath: status.karpenter.sqsQueueArn
                    - fromFieldPath: status.karpenter.accountId
                    - fromFieldPath: status.karpenter.instanceProfileRoleArn
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.parameters.inlinePolicy[0].policy

          - name: sqsQueue
            base:
              apiVersion: sqs.aws.upbound.io/v1beta1
              kind: Queue
              spec:
                forProvider:
                  messageRetentionSeconds: 300
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.id
                toFieldPath: spec.forProvider.name
                transforms:
                  - string:
                      fmt: '%s-karpenter'
                      type: Format
                    type: string
              - type: ToCompositeFieldPath
                fromFieldPath: status.atProvider.arn
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.karpenter.sqsQueueArn
              - type: ToCompositeFieldPath
                fromFieldPath: status.atProvider.name
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.karpenter.sqsQueueName

          - name: sqsQueuePolicy
            base:
              apiVersion: sqs.aws.upbound.io/v1beta1
              kind: QueuePolicy
              spec:
                forProvider:
                  queueUrlSelector:
                    matchControllerRef: true
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - type: CombineFromComposite
                combine:
                  strategy: string
                  string:
                    fmt: |
                      {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Sid": "SqsWrite",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": "sqs:SendMessage",
                            "Resource": "%s",
                            "Principal": {
                              "Service": [
                                "events.amazonaws.com",
                                "sqs.amazonaws.com"
                              ]
                            }
                          }
                        ]
                      }
                  variables:
                    - fromFieldPath: status.karpenter.sqsQueueArn
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.policy

          - name: ruleHealthEvent
            base:
              apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
              kind: Rule
              metadata:
                labels:
                  type: HealthEvent
              spec:
                forProvider:
                  eventBusName: default
                  eventPattern: |
                    {
                      "source": [
                        "aws.health"
                      ],
                      "detail-type": [
                        "AWS Health Event"
                      ]
                    }
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: '%s-healthevent'
                      type: Format
                    type: string
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.name
                transforms:
                  - string:
                      fmt: '%s-healthevent'
                      type: Format
                    type: string

          - name: ruleSpotInterrupt
            base:
              apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
              kind: Rule
              metadata:
                labels:
                  type: SpotInterrupt
              spec:
                forProvider:
                  eventBusName: default
                  eventPattern: |
                    {
                      "source": [
                        "aws.ec2"
                      ],
                      "detail-type": [
                        "EC2 Spot Instance Interruption Warning"
                      ]
                    }
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: '%s-spotinterrupt'
                      type: Format
                    type: string
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.name
                transforms:
                  - string:
                      fmt: '%s-spotinterrupt'
                      type: Format
                    type: string

          - name: ruleInstanceRebalance
            base:
              apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
              kind: Rule
              metadata:
                labels:
                  type: InstanceRebalance
              spec:
                forProvider:
                  eventBusName: default
                  eventPattern: |
                    {
                      "source": [
                        "aws.ec2"
                      ],
                      "detail-type": [
                        "EC2 Instance Rebalance Recommendation"
                      ]
                    }
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: '%s-instancerebalance'
                      type: Format
                    type: string
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.name
                transforms:
                  - string:
                      fmt: '%s-instancerebalance'
                      type: Format
                    type: string

          - name: ruleInstanceStateChange
            base:
              apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
              kind: Rule
              metadata:
                labels:
                  type: InstanceStateChange
              spec:
                forProvider:
                  eventBusName: default
                  eventPattern: |
                    {
                      "source": [
                        "aws.ec2"
                      ],
                      "detail-type": [
                        "EC2 Instance State-change Notification"
                      ]
                    }
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: '%s-instancestatechange'
                      type: Format
                    type: string
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.name
                transforms:
                  - string:
                      fmt: '%s-instancestatechange'
                      type: Format
                    type: string

          - name: ruleHealthEventTarget
            base:
              apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
              kind: Target
              spec:
                forProvider:
                  eventBusName: default
                  ruleSelector:
                    matchControllerRef: true
                    matchLabels:
                      type: HealthEvent
                  targetId: healthevent
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - type: FromCompositeFieldPath
                fromFieldPath: status.karpenter.sqsQueueArn
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.arn

          - name: ruleSpotInterruptTarget
            base:
              apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
              kind: Target
              spec:
                forProvider:
                  eventBusName: default
                  ruleSelector:
                    matchControllerRef: true
                    matchLabels:
                      type: SpotInterrupt
                  targetId: spotinterrupt
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - type: FromCompositeFieldPath
                fromFieldPath: status.karpenter.sqsQueueArn
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.arn

          - name: ruleInstanceRebalanceTarget
            base:
              apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
              kind: Target
              spec:
                forProvider:
                  eventBusName: default
                  ruleSelector:
                    matchControllerRef: true
                    matchLabels:
                      type: InstanceRebalance
                  targetId: instancerebalance
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - type: FromCompositeFieldPath
                fromFieldPath: status.karpenter.sqsQueueArn
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.arn

          - name: ruleInstanceStateChangeTarget
            base:
              apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
              kind: Target
              spec:
                forProvider:
                  eventBusName: default
                  ruleSelector:
                    matchControllerRef: true
                    matchLabels:
                      type: InstanceStateChange
                  targetId: instancestatechange
            patches:
              - type: PatchSet
                patchSetName: providerConfigRef
              - type: PatchSet
                patchSetName: deletionPolicy
              - type: PatchSet
                patchSetName: region
              - type: FromCompositeFieldPath
                fromFieldPath: status.karpenter.sqsQueueArn
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.arn

          - name: karpenterChart
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              spec:
                deletionPolicy: Orphan
                forProvider:
                  wait: true
                  chart:
                    name: karpenter
                    repository: oci://public.ecr.aws/karpenter
                    version: 1.0.0
                  namespace: karpenter
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
              - type: FromCompositeFieldPath
                fromFieldPath: status.karpenter.clusterName
                toFieldPath: spec.forProvider.values.settings.clusterName
                policy:
                  fromFieldPath: Required
              - type: FromCompositeFieldPath
                fromFieldPath: status.karpenter.sqsQueueName
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.values.settings.interruptionQueueName
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.id
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - match:
                      fallbackValue: null
                      patterns:
                        - regexp: .*
                          result: karpenter
                          type: regexp
                    type: match

          - name: karpenterNodePool
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: karpenter.sh/v1
                    kind: NodePool
                    metadata:
                      name: default
                    spec:
                      disruption:
                        consolidationPolicy: WhenEmptyOrUnderutilized
                        consolidateAfter: 1m
                      template:
                        metadata:
                          labels:
                            intent: apps
                        spec:
                          nodeClassRef:
                            group: karpenter.k8s.aws
                            kind: EC2NodeClass
                            name: default
                          requirements:
                            - key: karpenter.k8s.aws/instance-category
                              operator: In
                              values:
                                - c
                                - m
                                - r
                                - i
                                - d
                            - key: karpenter.k8s.aws/instance-cpu
                              operator: In
                              values:
                                - "4"
                                - "8"
                                - "16"
                                - "32"
                                - "48"
                                - "64"
                            - key: karpenter.sh/capacity-type
                              operator: In
                              values:
                                - spot
                                - on-demand
                            - key: kubernetes.io/arch
                              operator: In
                              values:
                                - amd64
                                - arm64
                      limits:
                        cpu: 1000
                        memory: 500Gi
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name

          - name: karpenterNodeClass
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: karpenter.k8s.aws/v1
                    kind: EC2NodeClass
                    metadata:
                      name: default
                    spec:
                      amiFamily: AL2
                      amiSelectorTerms:
                        - alias: al2@latest
                      tags:
                        KarpenterNodePoolName: default
                        NodeType: default
                        intent: apps
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.id
                toFieldPath: spec.forProvider.manifest.spec.subnetSelectorTerms[0].tags[networks.aws.platform.upbound.io/network-id]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.id
                toFieldPath: spec.forProvider.manifest.spec.securityGroupSelectorTerms[0].tags[eks.aws.platform.upbound.io/discovery]
              - type: FromCompositeFieldPath
                fromFieldPath: status.karpenter.clusterName
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.manifest.spec.securityGroupSelectorTerms[0].tags[aws:eks:cluster-name]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.id
                toFieldPath: spec.forProvider.manifest.spec.tags[karpenter.sh/discovery]
              - type: FromCompositeFieldPath
                fromFieldPath: status.karpenter.instanceProfileName
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.manifest.spec.instanceProfile
